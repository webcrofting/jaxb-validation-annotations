// NOPMD
package com.crofting.jaxbvalidation;

import com.sun.codemodel.JAnnotationUse;
import com.sun.xml.xsom.XSComponent;


import org.jvnet.jaxb2_commons.plugin.AbstractParameterizablePlugin;
import org.jvnet.jaxb2_commons.util.FieldAccessorUtils;
import org.xml.sax.ErrorHandler;

import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JFieldVar;
import com.sun.tools.xjc.Options;
import com.sun.tools.xjc.outline.ClassOutline;
import com.sun.tools.xjc.outline.FieldOutline;
import com.sun.tools.xjc.outline.Outline;
import com.sun.xml.xsom.XSAttributeUse;
import com.sun.xml.xsom.XSFacet;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import org.hibernate.validator.constraints.Length;

public class ValidationPlugin extends AbstractParameterizablePlugin {



	@Override
	public String getOptionName() {
		return "Xvalidate";
	}

	@Override
	public String getUsage() {
		return "TBD";
	}

	private String defaultFieldTarget = "getter";

	public String getDefaultFieldTarget() {
		return defaultFieldTarget;
	}

	public void setDefaultFieldTarget(String defaultFieldTarget) {
		if ("getter".equals(defaultFieldTarget)
				|| "setter".equals(defaultFieldTarget)
				|| "setter-parameter".equals(defaultFieldTarget)
				|| "field".equals(defaultFieldTarget)) {
			this.defaultFieldTarget = defaultFieldTarget;
		} else {
			throw new IllegalArgumentException("Invalid default field target.");
		}
	}


	@Override
	public boolean run(Outline outline, Options options,
			ErrorHandler errorHandler) {


		for (final ClassOutline classOutline : outline.getClasses()) {
			processClassOutline(classOutline, options, errorHandler);
		}
		return true;
	}



	protected void processClassOutline(ClassOutline classOutline,
			Options options, ErrorHandler errorHandler) {
 


		for (final FieldOutline fieldOutline : classOutline.getDeclaredFields()) {
			processFieldOutline(classOutline, fieldOutline, options,
					errorHandler);
		}

	}

	private void processFieldOutline(ClassOutline classOutline,
			FieldOutline fieldOutline, Options options,
			ErrorHandler errorHandler) {
		annotate(fieldOutline.parent().ref.owner(), fieldOutline,
				 errorHandler);
	}




        
	protected void annotate(final JCodeModel codeModel,
			final FieldOutline fieldOutline,
			ErrorHandler errorHandler)
        {

            //fieldOutline.getPropertyInfo().getSchemaComponent().
            JFieldVar var = FieldAccessorUtils.field(fieldOutline);



            if (var != null) {
                XSComponent schemaComponent = fieldOutline.getPropertyInfo().getSchemaComponent();
                if(schemaComponent instanceof XSAttributeUse)
                {
                    XSAttributeUse attributeUse = (XSAttributeUse) schemaComponent;
                    
                    int maxlength = -1;
                    int minlength = -1;

                    if(attributeUse.getDecl().getType().isRestriction())
                    {

                        for(XSFacet facet : attributeUse.getDecl().getType().asRestriction().getDeclaredFacets())
                        {
                            // maxLength, pattern, minInclusive, minLength, enumeration, maxInclusive
                            if(facet.FACET_PATTERN.equals(facet.getName()) && fieldOutline.getRawType().equals(codeModel.ref(String.class)))
                            {
                                JAnnotationUse annotate = var.annotate(Pattern.class);
                                annotate.param("regexp", facet.getValue().value);
                            }
                            
                            else if(facet.FACET_MAXLENGTH.equals(facet.getName()))
                            {
                                maxlength = Integer.parseInt(facet.getValue().toString());
                            }
                            else if(facet.FACET_MINLENGTH.equals(facet.getName()))
                            {
                                minlength = Integer.parseInt(facet.getValue().toString());
                            }
                            
                            else if(facet.FACET_MAXINCLUSIVE.equals(facet.getName()))
                            {
                                JAnnotationUse annotate = var.annotate(Max.class);

                                long parsedMax = Long.parseLong(facet.getValue().toString());

                                annotate.param("value", parsedMax > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) parsedMax );
                                //System.out.println("************************ " + fieldOutline.);
                            }
                            else if(facet.FACET_MININCLUSIVE.equals(facet.getName()))
                            {
                                JAnnotationUse annotate = var.annotate(Min.class);

                                long parsedMin = Long.parseLong(facet.getValue().toString());

                                annotate.param("value", parsedMin < Integer.MIN_VALUE ? Integer.MIN_VALUE : (int) parsedMin );
                            }
                        }
                        if(maxlength >= 0 || minlength >= 0)
                        {
                            JAnnotationUse annotate = var.annotate(Length.class);
                            if(minlength > 0) annotate.param("min", minlength);
                            if(maxlength > 0) annotate.param("max", maxlength);
                        }
                    }
                }
            }
            
        }

}
